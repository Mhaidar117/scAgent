{# Jinja2 template for result summarization #}
## Workflow Execution Summary
### Always provide a detailed summary of the execution plan and results, regardless of the success or failure of the steps.
### Original Request
{{ message }}

### Execution Plan
The following steps were executed:
{% for step in plan %}
{{ loop.index }}. **{{ step.tool }}**: {{ step.description }}
   {% if step.params %}
   Parameters: {{ step.params | tojson }}
   {% endif %}
{% endfor %}

### Results Summary

{% set success_count = tool_results | selectattr("message", "match", "^(?!‚ùå).*") | list | length %}
{% set error_count = tool_results | selectattr("message", "match", "^‚ùå.*") | list | length %}
{% set total_count = tool_results | length %}

**Execution Status**: {{ success_count }}/{{ total_count }} steps completed successfully
{% if error_count > 0 %}
‚ö†Ô∏è {{ error_count }} step(s) encountered errors
{% endif %}

#### Step-by-Step Results:
{% for result in tool_results %}
{% set loop_index = loop.index %}
**Step {{ loop_index }}**: {% if result.message.startswith("‚ùå") %}‚ùå Error{% else %}‚úÖ Success{% endif %}
- {{ result.message }}
{% if result.state_delta %}
- State changes: {{ result.state_delta | tojson }}
{% endif %}
{% if result.artifacts %}
- Generated artifacts:
  {% for artifact in result.artifacts %}
  - {{ artifact }}
  {% endfor %}
{% endif %}
{% endfor %}

### Generated Artifacts
{% if artifacts %}
The following files were created during this workflow:
{% for artifact in artifacts %}
- {{ artifact }}
{% endfor %}
{% else %}
No artifacts were generated.
{% endif %}

### Knowledge Sources
{% if citations %}
The following knowledge sources informed this analysis:
{% for citation in citations %}
- {{ citation }}
{% endfor %}
{% else %}
No specific citations were used for this analysis.
{% endif %}

### Next Steps
{% if error_count > 0 %}
üîß **Recommended Actions:**
- Review and resolve the errors above
- Check parameter settings and data quality
- Consider adjusting thresholds or methods

{% elif success_count == total_count %}
üéâ **Workflow completed successfully!**

{% if "compute_qc" in (tool_results | map(attribute="message") | join(" ")) %}
**After QC computation:**
- Review QC plots to determine appropriate filtering thresholds
- Consider running `plot_qc` if not already done
- Proceed with QC filtering based on visualizations
{% endif %}

{% if "plot_qc" in (tool_results | map(attribute="message") | join(" ")) %}
**After QC plotting:**
- Examine the generated plots to identify outliers
- Determine appropriate filtering thresholds
- Apply filters using `apply_qc_filters`
{% endif %}

{% if "apply_qc" in (tool_results | map(attribute="message") | join(" ")) %}
**After QC filtering:**
- Verify adequate cell retention (typically >80%)
- Consider running quick graph analysis
- Proceed to normalization and downstream analysis
{% endif %}

{% if "quick_graph" in (tool_results | map(attribute="message") | join(" ")) %}
**After graph analysis:**
- Examine clustering results and UMAP embedding
- Validate with known marker genes if available
- Consider batch correction if batch effects are visible
- Proceed to doublet detection if not yet done
{% endif %}

{% if "detect_doublets" in (tool_results | map(attribute="message") | join(" ")) %}
**After doublet detection:**
- Review doublet scores and detection results
- Apply doublet filter if results look reasonable
- Proceed to final graph analysis
{% endif %}

{% if "scvi" in (tool_results | map(attribute="message") | join(" ")) %}
**After scVI integration:**
- Use integrated representation (X_scVI) for downstream analysis
- Validate batch correction quality
- Proceed with graph analysis on integrated data
{% endif %}

{% if "final_graph" in (tool_results | map(attribute="message") | join(" ")) %}
**Pipeline Complete! üèÜ**
- Your scRNA-seq QC workflow is finished
- Review the final UMAP and clustering results
- Consider cell type annotation as the next step
- Generate a comprehensive report of your analysis
{% endif %}

{% endif %}

### Session Information
- **Run ID**: {{ state_summary.split('\n')[0].split(': ')[1] if state_summary else "Unknown" }}
- **Workflow artifacts saved**: All results are preserved for future reference
- **Command to view session**: `scqc state show`

---
*Generated by scQC Agent - {{ "now" | strftime("%Y-%m-%d %H:%M:%S") }}*
